import * as fs from 'fs';
import pdfjs from "pdfjs-dist";
const { getDocument } = pdfjs;
import type {TextItem} from "pdfjs-dist/types/src/display/api";
import chalk from "chalk";

type CharMap = {[key: number]: string}

const udef: undefined = undefined;

const charMap: CharMap[] = [
    {
        0xff10: '０', 0xff11: '１', 0xff12: '２', 0xff13: '３', 0xff14: '４', // debug
        0xff15: '５', 0xff16: '６', 0xff17: '７', 0xff18: '８', 0xff19: '９', // debug
        // 0xff10: '0', 0xff11: '1', 0xff12: '2', 0xff13: '3', 0xff14: '4', // fact
        // 0xff15: '5', 0xff16: '6', 0xff17: '7', 0xff18: '8', 0xff19: '9', // fact
    },
    {
        0x20:  ' ', 0x21: '前', 0x22: udef, 0x23: '范', 0x24: '围', 0x25: udef, 0x26: udef, 0x27: udef, 0x28: '用', 0x29: '文', 0x2a: udef, 0x2b: '术', 0x2c: udef, 0x2d: '和', 0x2e: '定', 0x2f: '义',
        0x30: '编', 0x31: udef, 0x32: '原', 0x33: udef, 0x34: '方', 0x35: '法', 0x36: '经', 0x37: '济', 0x38: '功', 0x39: '能', 0x3a: '区', 0x3b: '代', 0x3c: udef, 0x3d: udef, 0x3e: '考', 0x3f: '县',
        0x40: '全', 0x41: '国', 0x42: '主', 0x43: '要', 0x44: udef, 0x45: '型', 0x46: '技', 0x47: '开', 0x48: '发', 0x49: '共', 0x4a: '家', 0x4b: '级', 0x4c: '新', 0x4d: '高', 0x4e: '产', 0x4f: '业',
        0x50: '海', 0x51: '关', 0x52: '特', 0x53: '殊', 0x54: '监', 0x55: '管', 0x56: '域', 0x57: '边', 0x58: '境', 0x59: '合', 0x5a: '作', 0x5b: '跨', 0x5c: '自', 0x5d: '创', 0x5e: '示', 0x5f: '沿',
        0x60: '重', 0x61: '点', 0x62: '放', 0x63: '试', 0x64: '验', 0x65: '内', 0x66: '陆', 0x67: '由', 0x68: '贸', 0x69: '易', 0x6a: udef, 0x6b: udef, 0x6c: udef, 0x6d: '展', 0x6e: udef, 0x6f: udef,
        0x70: '其', 0x71: '他', 0x72: '北', 0x73: '京', 0x74: '市', 0x75: '省', 0x76: '天', 0x77: '津', 0x78: '河', 0x79: '山', 0x7a: '西', 0x7b: '蒙', 0x7c: '古', 0x7d: '治', 0x7e: '辽', 0x7f: '宁',
        0x80: '吉', 0x81: '林', 0x82: '黑', 0x83: '龙', 0x84: '江', 0x85: '上', 0x86: '苏', 0x87: '浙', 0x88: '安', 0x89: '徽', 0x8a: '福', 0x8b: '建', 0x8c: '东', 0x8d: '南', 0x8e: '湖', 0x8f: '广',
        0x90: '壮', 0x91: '族', 0x92: '庆', 0x93: '四', 0x94: '川', 0x95: '贵', 0x96: '州', 0x97: '云', 0x98: '藏', 0x99: '陕', 0x9a: '甘', 0x9b: '肃', 0x9c: '青', 0x9d: '夏', 0x9e: '回', 0x9f: '疆',
        0xa0: '维', 0xa1: '吾', 0xa2: '尔', 0xa3: '本', 0xa4: udef, 0xa5: '准', 0xa6: udef, 0xa7: '照', 0xa8: udef, 0xa9: '出', 0xaa: udef, 0xab: udef, 0xac: '草', 0xad: '现', 0xae: '息', 0xaf: udef,
        0xb0: '化', 0xb1: udef, 0xb2: udef, 0xb3: '会', 0xb4: udef, 0xb5: udef, 0xb6: '归', 0xb7: '口', 0xb8: udef, 0xb9: udef, 0xba: '中', 0xbb: '研', 0xbc: udef, 0xbd: '院', 0xbe: udef, 0xbf: '革',
        0xc0: '利', 0xc1: '外', 0xc2: '资', 0xc3: '投', 0xc4: udef, 0xc5: '科', 0xc6: '学', 0xc7: '部', 0xc8: '空', 0xc9: udef, 0xca: '商', 0xcb: '务', 0xcc: '理', 0xcd: udef, 0xce: udef, 0xcf: udef,
        0xd0: '计', 0xd1: '局', 0xd2: '设', 0xd3: '人', 0xd4: '朱', 0xd5: '虹', 0xd6: '咸', 0xd7: '奎', 0xd8: '桐', 0xd9: udef, 0xda: udef, 0xdb: '金', 0xdc: '胜', 0xdd: '陈', 0xde: '凯', 0xdf: udef,
        0xe0: '盛', 0xe1: udef, 0xe2: udef, 0xe3: '孙', 0xe4: '洪', 0xe5: udef, 0xe6: '张', 0xe7: '扬', 0xe8: '李', 0xe9: '莎', 0xea: '华', 0xeb: '王', 0xec: udef, 0xed: udef, 0xee: udef, 0xef: udef,
        0xf0: udef, 0xf1: '成', 0xf2: '立', 0xf3: udef, 0xf4: '及', 0xf5: '民', 0xf6: '政', 0xf7: '府', 0xf8: udef, 0xf9: '于', 0xfa: '库', 0xfb: udef, 0xfc: udef, 0xfd: udef, 0xfe: '交', 0xff: udef,
        0x0301: '提', 0x0304: '分',
        0x0327: '单',
    }, {
        0x20:  ' ', 0x21: udef, 0x22: udef, 0x23: udef, 0x24: udef, 0x25: udef, 0x26: udef, 0x27: udef, 0x28: udef, 0x29: udef, 0x2a: udef, 0x2b: udef, 0x2c: udef, 0x2d: udef, 0x2e: udef, 0x2f: udef,
        0x30: udef, 0x31: udef, 0x32: udef, 0x33: udef, 0x34: udef, 0x35: udef, 0x36: udef, 0x37: udef, 0x38: udef, 0x39: udef, 0x3a: udef, 0x3b: udef, 0x3c: udef, 0x3d: udef, 0x3e: udef, 0x3f: udef,
        0x40: udef, 0x41: udef, 0x42: udef, 0x43: udef, 0x44: udef, 0x45: udef, 0x46: udef, 0x47: udef, 0x48: udef, 0x49: udef, 0x4a: '顺', 0x4b: udef, 0x4c: udef, 0x4d: udef, 0x4e: udef, 0x4f: udef,
        0x50: udef, 0x51: udef, 0x52: udef, 0x53: udef, 0x54: udef, 0x55: udef, 0x56: udef, 0x57: udef, 0x58: '大', 0x59: udef, 0x5a: udef, 0x5b: udef, 0x5c: udef, 0x5d: udef, 0x5e: udef, 0x5f: '城',
        0x60: udef, 0x61: udef, 0x62: udef, 0x63: udef, 0x64: udef, 0x65: udef, 0x66: udef, 0x67: udef, 0x68: udef, 0x69: udef, 0x6a: udef, 0x6b: udef, 0x6c: udef, 0x6d: udef, 0x6e: udef, 0x6f: udef,
        0x70: udef, 0x71: udef, 0x72: udef, 0x73: udef, 0x74: udef, 0x75: udef, 0x76: udef, 0x77: udef, 0x78: udef, 0x79: udef, 0x7a: udef, 0x7b: udef, 0x7c: udef, 0x7d: udef, 0x7e: udef, 0x7f: udef,
        0x80: udef, 0x81: udef, 0x82: udef, 0x83: udef, 0x84: udef, 0x85: udef, 0x86: udef, 0x87: udef, 0x88: udef, 0x89: udef, 0x8a: udef, 0x8b: udef, 0x8c: udef, 0x8d: udef, 0x8e: udef, 0x8f: '港',
        0x90: udef, 0x91: udef, 0x92: udef, 0x93: udef, 0x94: '旅', 0x95: udef, 0x96: udef, 0x97: udef, 0x98: udef, 0x99: udef, 0x9a: udef, 0x9b: udef, 0x9c: udef, 0x9d: '同', 0x9e: udef, 0x9f: udef,
        0xa0: udef, 0xa1: udef, 0xa2: udef, 0xa3: udef, 0xa4: udef, 0xa5: udef, 0xa6: udef, 0xa7: udef, 0xa8: udef, 0xa9: '平', 0xaa: udef, 0xab: udef, 0xac: udef, 0xad: udef, 0xae: udef, 0xaf: udef,
        0xb0: udef, 0xb1: udef, 0xb2: udef, 0xb3: '长', 0xb4: udef, 0xb5: udef, 0xb6: udef, 0xb7: udef, 0xb8: udef, 0xb9: '营', 0xba: udef, 0xbb: udef, 0xbc: udef, 0xbd: udef, 0xbe: udef, 0xbf: udef,
        0xc0: udef, 0xc1: udef, 0xc2: udef, 0xc3: udef, 0xc4: udef, 0xc5: udef, 0xc6: udef, 0xc7: udef, 0xc8: udef, 0xc9: udef, 0xca: udef, 0xcb: udef, 0xcc: udef, 0xcd: udef, 0xce: udef, 0xcf: udef,
        0xd0: udef, 0xd1: udef, 0xd2: udef, 0xd3: udef, 0xd4: udef, 0xd5: udef, 0xd6: udef, 0xd7: udef, 0xd8: udef, 0xd9: udef, 0xda: udef, 0xdb: '临', 0xdc: udef, 0xdd: udef, 0xde: udef, 0xdf: udef,
        0xe0: udef, 0xe1: udef, 0xe2: udef, 0xe3: udef, 0xe4: udef, 0xe5: udef, 0xe6: udef, 0xe7: udef, 0xe8: udef, 0xe9: udef, 0xea: udef, 0xeb: udef, 0xec: udef, 0xed: '武', 0xee: '清', 0xef: '子',
        0xf0: '牙', 0xf1: '辰', 0xf2: '丽', 0xf3: '秦', 0xf4: '皇', 0xf5: '岛', 0xf6: '廊', 0xf7: '坊', 0xf8: '沧', 0xf9: '石', 0xfa: '庄', 0xfb: '唐', 0xfc: '曹', 0xfd: '妃', 0xfe: '甸', 0xff: '邯',
        0x03bc: '布',
    }, {
        0x20:  ' ', 0x21: '郸', 0x22: '太', 0x23: '晋', 0x24: '呼', 0x25: '浩', 0x26: '巴', 0x27: '彦', 0x28: '卓', 0x29: '伦', 0x2a: '贝', 0x2b: '连', 0x2c: '沈', 0x2d: '阳', 0x2e: '兴', 0x2f: '锦',
        0x30: '辉', 0x31: '盘', 0x32: '滨', 0x33: '铁', 0x34: '岭', 0x35: '春', 0x36: '红', 0x37: '嘴', 0x38: '汽', 0x39: '车', 0x3a: '松', 0x3b: '哈', 0x3c: '宾', 0x3d: udef, 0x3e: udef, 0x3f: udef,
        0x40: udef, 0x41: udef, 0x42: udef, 0x43: udef, 0x44: udef, 0x45: udef, 0x46: udef, 0x47: udef, 0x48: udef, 0x49: udef, 0x4a: udef, 0x4b: udef, 0x4c: udef, 0x4d: udef, 0x4e: udef, 0x4f: udef,
        0x50: udef, 0x51: udef, 0x52: udef, 0x53: udef, 0x54: udef, 0x55: udef, 0x56: udef, 0x57: udef, 0x58: udef, 0x59: udef, 0x5a: udef, 0x5b: udef, 0x5c: udef, 0x5d: udef, 0x5e: udef, 0x5f: udef,
        0x60: udef, 0x61: udef, 0x62: udef, 0x63: udef, 0x64: udef, 0x65: udef, 0x66: udef, 0x67: udef, 0x68: udef, 0x69: udef, 0x6a: udef, 0x6b: udef, 0x6c: udef, 0x6d: udef, 0x6e: udef, 0x6f: udef,
        0x70: udef, 0x71: udef, 0x72: udef, 0x73: udef, 0x74: udef, 0x75: udef, 0x76: udef, 0x77: udef, 0x78: udef, 0x79: udef, 0x7a: udef, 0x7b: udef, 0x7c: udef, 0x7d: udef, 0x7e: udef, 0x7f: udef,
        0x80: udef, 0x81: udef, 0x82: udef, 0x83: udef, 0x84: udef, 0x85: udef, 0x86: udef, 0x87: udef, 0x88: udef, 0x89: udef, 0x8a: udef, 0x8b: udef, 0x8c: udef, 0x8d: udef, 0x8e: udef, 0x8f: udef,
        0x90: udef, 0x91: udef, 0x92: udef, 0x93: udef, 0x94: udef, 0x95: udef, 0x96: udef, 0x97: udef, 0x98: udef, 0x99: udef, 0x9a: udef, 0x9b: udef, 0x9c: udef, 0x9d: udef, 0x9e: udef, 0x9f: udef,
        0xa0: udef, 0xa1: udef, 0xa2: udef, 0xa3: udef, 0xa4: udef, 0xa5: udef, 0xa6: udef, 0xa7: udef, 0xa8: udef, 0xa9: udef, 0xaa: udef, 0xab: udef, 0xac: udef, 0xad: udef, 0xae: udef, 0xaf: udef,
        0xb0: udef, 0xb1: udef, 0xb2: udef, 0xb3: udef, 0xb4: udef, 0xb5: udef, 0xb6: udef, 0xb7: udef, 0xb8: udef, 0xb9: udef, 0xba: udef, 0xbb: udef, 0xbc: udef, 0xbd: udef, 0xbe: udef, 0xbf: udef,
        0xc0: udef, 0xc1: udef, 0xc2: udef, 0xc3: udef, 0xc4: udef, 0xc5: udef, 0xc6: udef, 0xc7: udef, 0xc8: udef, 0xc9: udef, 0xca: udef, 0xcb: udef, 0xcc: udef, 0xcd: udef, 0xce: udef, 0xcf: udef,
        0xd0: udef, 0xd1: udef, 0xd2: udef, 0xd3: udef, 0xd4: udef, 0xd5: udef, 0xd6: udef, 0xd7: udef, 0xd8: udef, 0xd9: udef, 0xda: udef, 0xdb: udef, 0xdc: udef, 0xdd: udef, 0xde: udef, 0xdf: udef,
        0xe0: udef, 0xe1: udef, 0xe2: udef, 0xe3: udef, 0xe4: udef, 0xe5: udef, 0xe6: udef, 0xe7: udef, 0xe8: udef, 0xe9: udef, 0xea: udef, 0xeb: udef, 0xec: udef, 0xed: udef, 0xee: udef, 0xef: udef,
        0xf0: udef, 0xf1: udef, 0xf2: udef, 0xf3: udef, 0xf4: udef, 0xf5: udef, 0xf6: udef, 0xf7: udef, 0xf8: udef, 0xf9: udef, 0xfa: udef, 0xfb: udef, 0xfc: udef, 0xfd: udef, 0xfe: udef, 0xff: udef,
        0x03bc: '都',
    }, {
        0x20:  ' ', 0x21: udef, 0x22: udef, 0x23: udef, 0x24: udef, 0x25: udef, 0x26: udef, 0x27: udef, 0x28: udef, 0x29: udef, 0x2a: udef, 0x2b: udef, 0x2c: udef, 0x2d: udef, 0x2e: udef, 0x2f: udef,
        0x30: udef, 0x31: udef, 0x32: udef, 0x33: udef, 0x34: udef, 0x35: udef, 0x36: udef, 0x37: udef, 0x38: udef, 0x39: udef, 0x3a: udef, 0x3b: udef, 0x3c: udef, 0x3d: udef, 0x3e: udef, 0x3f: udef,
        0x40: udef, 0x41: udef, 0x42: udef, 0x43: udef, 0x44: udef, 0x45: udef, 0x46: udef, 0x47: udef, 0x48: udef, 0x49: udef, 0x4a: udef, 0x4b: udef, 0x4c: udef, 0x4d: udef, 0x4e: udef, 0x4f: udef,
        0x50: udef, 0x51: udef, 0x52: udef, 0x53: udef, 0x54: udef, 0x55: udef, 0x56: udef, 0x57: udef, 0x58: udef, 0x59: udef, 0x5a: udef, 0x5b: udef, 0x5c: udef, 0x5d: udef, 0x5e: udef, 0x5f: udef,
        0x60: udef, 0x61: udef, 0x62: udef, 0x63: udef, 0x64: udef, 0x65: udef, 0x66: udef, 0x67: udef, 0x68: udef, 0x69: udef, 0x6a: udef, 0x6b: udef, 0x6c: udef, 0x6d: udef, 0x6e: udef, 0x6f: udef,
        0x70: udef, 0x71: udef, 0x72: udef, 0x73: udef, 0x74: udef, 0x75: udef, 0x76: udef, 0x77: udef, 0x78: udef, 0x79: udef, 0x7a: udef, 0x7b: udef, 0x7c: udef, 0x7d: udef, 0x7e: udef, 0x7f: udef,
        0x80: udef, 0x81: udef, 0x82: udef, 0x83: udef, 0x84: udef, 0x85: udef, 0x86: udef, 0x87: udef, 0x88: udef, 0x89: udef, 0x8a: udef, 0x8b: udef, 0x8c: udef, 0x8d: udef, 0x8e: udef, 0x8f: udef,
        0x90: udef, 0x91: udef, 0x92: udef, 0x93: udef, 0x94: udef, 0x95: udef, 0x96: udef, 0x97: udef, 0x98: udef, 0x99: udef, 0x9a: udef, 0x9b: udef, 0x9c: udef, 0x9d: udef, 0x9e: udef, 0x9f: udef,
        0xa0: udef, 0xa1: udef, 0xa2: udef, 0xa3: udef, 0xa4: udef, 0xa5: udef, 0xa6: udef, 0xa7: udef, 0xa8: udef, 0xa9: udef, 0xaa: udef, 0xab: udef, 0xac: udef, 0xad: udef, 0xae: udef, 0xaf: udef,
        0xb0: udef, 0xb1: udef, 0xb2: udef, 0xb3: udef, 0xb4: udef, 0xb5: udef, 0xb6: udef, 0xb7: udef, 0xb8: udef, 0xb9: udef, 0xba: udef, 0xbb: udef, 0xbc: udef, 0xbd: udef, 0xbe: udef, 0xbf: udef,
        0xc0: udef, 0xc1: udef, 0xc2: udef, 0xc3: udef, 0xc4: udef, 0xc5: udef, 0xc6: udef, 0xc7: udef, 0xc8: udef, 0xc9: udef, 0xca: udef, 0xcb: udef, 0xcc: udef, 0xcd: udef, 0xce: udef, 0xcf: udef,
        0xd0: udef, 0xd1: udef, 0xd2: udef, 0xd3: udef, 0xd4: udef, 0xd5: udef, 0xd6: udef, 0xd7: udef, 0xd8: udef, 0xd9: udef, 0xda: udef, 0xdb: udef, 0xdc: udef, 0xdd: udef, 0xde: udef, 0xdf: udef,
        0xe0: udef, 0xe1: udef, 0xe2: udef, 0xe3: udef, 0xe4: udef, 0xe5: udef, 0xe6: udef, 0xe7: udef, 0xe8: udef, 0xe9: udef, 0xea: udef, 0xeb: udef, 0xec: udef, 0xed: udef, 0xee: udef, 0xef: udef,
        0xf0: udef, 0xf1: udef, 0xf2: udef, 0xf3: udef, 0xf4: udef, 0xf5: udef, 0xf6: udef, 0xf7: udef, 0xf8: udef, 0xf9: udef, 0xfa: udef, 0xfb: udef, 0xfc: udef, 0xfd: udef, 0xfe: udef, 0xff: udef,
        0x03bc: '坡',
    }, {
        0x20:  ' ', 0x21: udef, 0x22: udef, 0x23: udef, 0x24: udef, 0x25: udef, 0x26: udef, 0x27: udef, 0x28: udef, 0x29: udef, 0x2a: udef, 0x2b: udef, 0x2c: udef, 0x2d: udef, 0x2e: udef, 0x2f: udef,
        0x30: udef, 0x31: udef, 0x32: udef, 0x33: udef, 0x34: udef, 0x35: udef, 0x36: udef, 0x37: udef, 0x38: udef, 0x39: udef, 0x3a: udef, 0x3b: udef, 0x3c: udef, 0x3d: udef, 0x3e: udef, 0x3f: udef,
        0x40: udef, 0x41: udef, 0x42: udef, 0x43: udef, 0x44: udef, 0x45: udef, 0x46: udef, 0x47: udef, 0x48: udef, 0x49: udef, 0x4a: udef, 0x4b: udef, 0x4c: udef, 0x4d: udef, 0x4e: udef, 0x4f: udef,
        0x50: udef, 0x51: udef, 0x52: udef, 0x53: udef, 0x54: udef, 0x55: udef, 0x56: udef, 0x57: udef, 0x58: udef, 0x59: udef, 0x5a: udef, 0x5b: udef, 0x5c: udef, 0x5d: udef, 0x5e: udef, 0x5f: udef,
        0x60: udef, 0x61: udef, 0x62: udef, 0x63: udef, 0x64: udef, 0x65: udef, 0x66: udef, 0x67: udef, 0x68: udef, 0x69: udef, 0x6a: udef, 0x6b: udef, 0x6c: udef, 0x6d: udef, 0x6e: udef, 0x6f: udef,
        0x70: udef, 0x71: udef, 0x72: udef, 0x73: udef, 0x74: udef, 0x75: udef, 0x76: udef, 0x77: udef, 0x78: udef, 0x79: udef, 0x7a: udef, 0x7b: udef, 0x7c: udef, 0x7d: udef, 0x7e: udef, 0x7f: udef,
        0x80: udef, 0x81: udef, 0x82: udef, 0x83: udef, 0x84: udef, 0x85: udef, 0x86: udef, 0x87: udef, 0x88: udef, 0x89: udef, 0x8a: udef, 0x8b: udef, 0x8c: udef, 0x8d: udef, 0x8e: udef, 0x8f: udef,
        0x90: udef, 0x91: udef, 0x92: udef, 0x93: udef, 0x94: udef, 0x95: udef, 0x96: udef, 0x97: udef, 0x98: udef, 0x99: udef, 0x9a: udef, 0x9b: udef, 0x9c: udef, 0x9d: udef, 0x9e: udef, 0x9f: udef,
        0xa0: udef, 0xa1: udef, 0xa2: udef, 0xa3: udef, 0xa4: udef, 0xa5: udef, 0xa6: udef, 0xa7: udef, 0xa8: udef, 0xa9: udef, 0xaa: udef, 0xab: udef, 0xac: udef, 0xad: udef, 0xae: udef, 0xaf: udef,
        0xb0: udef, 0xb1: udef, 0xb2: udef, 0xb3: udef, 0xb4: udef, 0xb5: udef, 0xb6: udef, 0xb7: udef, 0xb8: udef, 0xb9: udef, 0xba: udef, 0xbb: udef, 0xbc: udef, 0xbd: udef, 0xbe: udef, 0xbf: udef,
        0xc0: udef, 0xc1: udef, 0xc2: udef, 0xc3: udef, 0xc4: udef, 0xc5: udef, 0xc6: udef, 0xc7: udef, 0xc8: udef, 0xc9: udef, 0xca: udef, 0xcb: udef, 0xcc: udef, 0xcd: udef, 0xce: udef, 0xcf: udef,
        0xd0: udef, 0xd1: udef, 0xd2: udef, 0xd3: udef, 0xd4: udef, 0xd5: udef, 0xd6: udef, 0xd7: udef, 0xd8: udef, 0xd9: udef, 0xda: udef, 0xdb: udef, 0xdc: udef, 0xdd: udef, 0xde: udef, 0xdf: udef,
        0xe0: udef, 0xe1: udef, 0xe2: udef, 0xe3: udef, 0xe4: udef, 0xe5: udef, 0xe6: udef, 0xe7: udef, 0xe8: udef, 0xe9: udef, 0xea: udef, 0xeb: udef, 0xec: udef, 0xed: udef, 0xee: udef, 0xef: udef,
        0xf0: udef, 0xf1: udef, 0xf2: udef, 0xf3: udef, 0xf4: udef, 0xf5: udef, 0xf6: udef, 0xf7: udef, 0xf8: udef, 0xf9: udef, 0xfa: udef, 0xfb: udef, 0xfc: udef, 0xfd: udef, 0xfe: udef, 0xff: udef,
        0x03bc: '翔',
    }, {
        0x20:  ' ', 0x21: udef, 0x22: udef, 0x23: udef, 0x24: udef, 0x25: udef, 0x26: udef, 0x27: udef, 0x28: udef, 0x29: udef, 0x2a: udef, 0x2b: udef, 0x2c: udef, 0x2d: udef, 0x2e: udef, 0x2f: udef,
        0x30: udef, 0x31: udef, 0x32: udef, 0x33: udef, 0x34: udef, 0x35: udef, 0x36: udef, 0x37: udef, 0x38: udef, 0x39: udef, 0x3a: udef, 0x3b: udef, 0x3c: udef, 0x3d: udef, 0x3e: udef, 0x3f: udef,
        0x40: udef, 0x41: udef, 0x42: udef, 0x43: udef, 0x44: udef, 0x45: udef, 0x46: udef, 0x47: udef, 0x48: udef, 0x49: udef, 0x4a: udef, 0x4b: udef, 0x4c: udef, 0x4d: udef, 0x4e: udef, 0x4f: udef,
        0x50: udef, 0x51: udef, 0x52: udef, 0x53: udef, 0x54: udef, 0x55: udef, 0x56: udef, 0x57: udef, 0x58: udef, 0x59: udef, 0x5a: udef, 0x5b: udef, 0x5c: udef, 0x5d: udef, 0x5e: udef, 0x5f: udef,
        0x60: udef, 0x61: udef, 0x62: udef, 0x63: udef, 0x64: udef, 0x65: udef, 0x66: udef, 0x67: udef, 0x68: udef, 0x69: udef, 0x6a: udef, 0x6b: udef, 0x6c: udef, 0x6d: udef, 0x6e: udef, 0x6f: udef,
        0x70: udef, 0x71: udef, 0x72: udef, 0x73: udef, 0x74: udef, 0x75: udef, 0x76: udef, 0x77: udef, 0x78: udef, 0x79: udef, 0x7a: udef, 0x7b: udef, 0x7c: udef, 0x7d: udef, 0x7e: udef, 0x7f: udef,
        0x80: udef, 0x81: udef, 0x82: udef, 0x83: udef, 0x84: udef, 0x85: udef, 0x86: udef, 0x87: udef, 0x88: udef, 0x89: udef, 0x8a: udef, 0x8b: udef, 0x8c: udef, 0x8d: udef, 0x8e: udef, 0x8f: udef,
        0x90: udef, 0x91: udef, 0x92: udef, 0x93: udef, 0x94: udef, 0x95: udef, 0x96: udef, 0x97: udef, 0x98: udef, 0x99: udef, 0x9a: udef, 0x9b: udef, 0x9c: udef, 0x9d: udef, 0x9e: udef, 0x9f: udef,
        0xa0: udef, 0xa1: udef, 0xa2: udef, 0xa3: udef, 0xa4: udef, 0xa5: udef, 0xa6: udef, 0xa7: udef, 0xa8: udef, 0xa9: udef, 0xaa: udef, 0xab: udef, 0xac: udef, 0xad: udef, 0xae: udef, 0xaf: udef,
        0xb0: udef, 0xb1: udef, 0xb2: udef, 0xb3: udef, 0xb4: udef, 0xb5: udef, 0xb6: udef, 0xb7: udef, 0xb8: udef, 0xb9: udef, 0xba: udef, 0xbb: udef, 0xbc: udef, 0xbd: udef, 0xbe: udef, 0xbf: udef,
        0xc0: udef, 0xc1: udef, 0xc2: udef, 0xc3: udef, 0xc4: udef, 0xc5: udef, 0xc6: udef, 0xc7: udef, 0xc8: udef, 0xc9: udef, 0xca: udef, 0xcb: udef, 0xcc: udef, 0xcd: udef, 0xce: udef, 0xcf: udef,
        0xd0: udef, 0xd1: udef, 0xd2: udef, 0xd3: udef, 0xd4: udef, 0xd5: udef, 0xd6: udef, 0xd7: udef, 0xd8: udef, 0xd9: udef, 0xda: udef, 0xdb: udef, 0xdc: udef, 0xdd: udef, 0xde: udef, 0xdf: udef,
        0xe0: udef, 0xe1: udef, 0xe2: udef, 0xe3: udef, 0xe4: udef, 0xe5: udef, 0xe6: udef, 0xe7: udef, 0xe8: udef, 0xe9: udef, 0xea: udef, 0xeb: udef, 0xec: udef, 0xed: udef, 0xee: udef, 0xef: udef,
        0xf0: udef, 0xf1: udef, 0xf2: udef, 0xf3: udef, 0xf4: udef, 0xf5: udef, 0xf6: udef, 0xf7: udef, 0xf8: udef, 0xf9: udef, 0xfa: udef, 0xfb: udef, 0xfc: udef, 0xfd: udef, 0xfe: udef, 0xff: udef,
        0x03bc: '砚',
    },
];

function EncodeUnicode(unicode: number) {
    const charCode = unicode.toString(16);
    return '\\u' + '0'.repeat(4 - charCode.length) + charCode;
}

function mapString(s: string, map: CharMap, color: string = "") {
    return s.replace(/[\u0000-\uFFFF]/g, (m => {
        const unicode = m.charCodeAt(0);
        return color ? chalk.bgHex(color)(map[unicode] ?? EncodeUnicode(unicode)) : map[unicode];
    }));
}

async function *parsePDF(data: Uint8Array) {
    const task = getDocument({
        data: data,
        isEvalSupported: false,
    });
    const pdf = await task.promise;
    type Result = {str: string, font: number, line: number};
    for (const pageNumber of Array.from({length: pdf.numPages}, (_, i) => 1 + i)) {
        const page = await pdf.getPage(pageNumber);
        await page.getOperatorList(); // 加载字体
        const text: Result[] = (await page.getTextContent({
            includeMarkedContent: false,
            disableNormalization: false,
        })).items.map((text) => {
            const isTextItem = (value: any): value is TextItem => value && value.str != undefined;
            if (isTextItem(text)) {
                const font = page.commonObjs.get(text.fontName);
                if (font.type === "CIDFontType0" && font.subtype === "CIDFontType0C" && font.name === "E-BZ9-PK748344")
                    return {str: text.str, font: 0, line: text.transform[5] as number};
                else if (font.type === "Type1" && font.subtype === "Type1C")
                    return {str: text.str, font: Number(/^([A-Z]{6})\+FzBookMaker(?<type>[0-9])DlFont\k<type>([0-9]{10})$/.exec(font.name)[2]), line: text.transform[5] as number};
                else
                    return undefined;
            } else {
                return undefined;
            }
        }).filter((text) =>  text != undefined && text.str.length != 0) as Result[];
        const result: Result[] = [];
        let currentStr = text[0];
        for (let i = 1; i < text.length; i++) {
            const {str, font, line} = text[i];

            if (font === text[i - 1].font && line === text[i - 1].line) {
                currentStr.str += str;
            } else {
                result.push(currentStr);
                currentStr = {str, font, line};
            }
        }
        yield {pageNumber, result};
    }
    await pdf.destroy();
}

export const main = async () => {
    const colors = [
        "#a4b0be",
        "#ffc9c9",
        "#ffd8a8",
        "#ffec99",
        "#b2f2bb",
        "#a5d8ff",
        "#99e9f2",
        "#d0bfff",
    ]

    for await (const {pageNumber: page, result: text} of parsePDF(new Uint8Array(fs.readFileSync("./src/raw/GB_T 37028-2018《全国主要经济功能区分类与代码》.pdf")))) {
        console.log(`====${page}====`)
        let i = 0;
        while (i < text.length) {
            if (text[i].font === 0) {
                const code = /^([０１２３４５６７８９]{2})([０１２３４５６７８９]{3})([０１２３４５６７８９]{3}) $/.exec(text[i].str);
                if (code) {
                    const province_code = mapString(code[1], charMap[text[i].font], "#bcd4e7");
                    const classification_code = mapString(code[2], charMap[text[i].font], "#a3bbdb");
                    const zone_code = mapString(code[3], charMap[text[i].font], "#8aabcc");

                    const line = text[++i].line;
                    let name: string[] = [];
                    do {
                        name.push(chalk.bgHex("#a4b0be")(text[i].font));
                        name.push(mapString(text[i].str, charMap[text[i].font], colors[text[i].font]));
                    } while (++i < text.length && text[i].line === line);

                    console.log(province_code + classification_code + zone_code, name.join(""));
                } else {
                    i++;
                }
            } else {
                i++;
            }
        }
    }

    return {}
}
